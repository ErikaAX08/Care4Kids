//
//  ChildService.swift
//  Care4KidsiOSApp
//
//  Created by Erika Amastal on 17/08/25.
//

import Foundation
import Combine

class ChildService: ObservableObject {
    private let apiService = APIService.shared
    
    // MARK: - Get My Child Codes
    func getMyChildCodes() async throws -> [ChildCode] {
        print("üìã ChildService: Obteniendo c√≥digos de registro...")
        
        // Obtener el token de autenticaci√≥n
        guard let token = AuthService.getCurrentToken() else {
            print("‚ùå ChildService: Token no encontrado")
            throw ChildServiceError.notAuthenticated
        }
        
        print("üîë ChildService: Token obtenido: \(token.prefix(10))...")
        
        // Hacer la petici√≥n con autenticaci√≥n (GET no necesita body)
        let response: MyChildCodesResponse = try await makeAuthenticatedRequest(
            endpoint: "children/my-codes/",
            method: .GET,
            body: nil,
            token: token,
            responseType: MyChildCodesResponse.self
        )
        
        print("‚úÖ ChildService: C√≥digos obtenidos exitosamente")
        print("üìä Total de c√≥digos: \(response.total_codes)")
        for code in response.child_codes {
            print("üî¢ C√≥digo: \(code.registration_code) - Ni√±o: \(code.child_name) - Estado: \(code.status)")
        }
        
        return response.child_codes
    }
    func generateRegistrationCode(childName: String) async throws -> ChildRegistration {
        print("üë∂ ChildService: Generando c√≥digo de registro para '\(childName)'...")
        
        // Obtener el token de autenticaci√≥n
        guard let token = AuthService.getCurrentToken() else {
            print("‚ùå ChildService: Token no encontrado")
            throw ChildServiceError.notAuthenticated
        }
        
        print("üîë ChildService: Token obtenido: \(token.prefix(10))...")
        
        // Crear el request
        let childRequest = ChildRegistrationRequest(child_name: childName)
        let requestBody = try JSONEncoder().encode(childRequest)
        
        // Hacer la petici√≥n con autenticaci√≥n
        let response: ChildRegistrationResponse = try await makeAuthenticatedRequest(
            endpoint: "children/generate-code/",
            method: .POST,
            body: requestBody,
            token: token,
            responseType: ChildRegistrationResponse.self
        )
        
        print("‚úÖ ChildService: C√≥digo de registro generado exitosamente")
        print("üî¢ C√≥digo: \(response.child_registration.registration_code)")
        print("üë∂ Ni√±o: \(response.child_registration.child_name)")
        print("‚è∞ Expira: \(response.child_registration.expires_at)")
        
        return response.child_registration
    }
    
    // MARK: - Private Methods
    private func makeAuthenticatedRequest<T: Codable>(
        endpoint: String,
        method: HTTPMethod,
        body: Data? = nil,
        token: String,
        responseType: T.Type
    ) async throws -> T {
        
        print("üöÄ === INICIO DE REQUEST AUTENTICADO (CHILD SERVICE) ===")
        print("üéØ Endpoint: \(endpoint)")
        print("üîß Method: \(method.rawValue)")
        print("üîë Token: \(token.prefix(10))...")
        
        let baseURL = "http://127.0.0.1:8000/api/"
        
        guard let url = URL(string: baseURL + endpoint) else {
            print("‚ùå URL INV√ÅLIDA: '\(baseURL + endpoint)'")
            throw ChildServiceError.invalidRequest
        }
        
        print("üåê URL final: \(url)")
        
        var request = URLRequest(url: url)
        request.httpMethod = method.rawValue
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Token \(token)", forHTTPHeaderField: "Authorization")
        
        if let body = body {
            request.httpBody = body
            if let bodyString = String(data: body, encoding: .utf8) {
                print("üì¶ Request body: \(bodyString)")
            }
        }
        
        print("üìã Headers: \(request.allHTTPHeaderFields ?? [:])")
        print("‚è≥ Enviando request autenticado...")
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            print("üì® Response recibido!")
            print("üìä Data size: \(data.count) bytes")
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå FALLO: Response no es HTTPURLResponse")
                throw ChildServiceError.invalidResponse
            }
            
            print("üì° Status code: \(httpResponse.statusCode)")
            
            // SIEMPRE mostrar la respuesta raw
            let responseString = String(data: data, encoding: .utf8) ?? "No se pudo decodificar"
            print("üìÑ Response body RAW: '\(responseString)'")
            
            switch httpResponse.statusCode {
            case 200...299:
                print("‚úÖ Status code exitoso, intentando decodificar...")
                print("üéØ Tipo esperado: \(responseType)")
                
                do {
                    let decoder = JSONDecoder()
                    let decodedResponse = try decoder.decode(responseType, from: data)
                    print("‚úÖ JSON decodificado exitosamente!")
                    print("üèÅ === FIN REQUEST EXITOSO ===")
                    return decodedResponse
                } catch {
                    print("‚ùå ERROR DECODIFICANDO JSON:")
                    print("‚ùå Error: \(error)")
                    
                    if let decodingError = error as? DecodingError {
                        switch decodingError {
                        case .keyNotFound(let key, let context):
                            print("‚ùå Key no encontrada: '\(key.stringValue)'")
                            print("‚ùå Context: \(context)")
                        case .typeMismatch(let type, let context):
                            print("‚ùå Tipo incorrecto: esperaba \(type)")
                            print("‚ùå Context: \(context)")
                        case .valueNotFound(let type, let context):
                            print("‚ùå Valor no encontrado para tipo: \(type)")
                            print("‚ùå Context: \(context)")
                        case .dataCorrupted(let context):
                            print("‚ùå Datos corruptos: \(context)")
                        @unknown default:
                            print("‚ùå Error de decodificaci√≥n desconocido")
                        }
                    }
                    throw ChildServiceError.invalidResponse
                }
                
            case 401:
                print("‚ùå Unauthorized (401) - Token inv√°lido o expirado")
                throw ChildServiceError.notAuthenticated
            case 400:
                print("‚ùå Bad Request (400)")
                throw ChildServiceError.invalidRequest
            case 500:
                print("‚ùå Server Error (500)")
                throw ChildServiceError.serverError
            default:
                print("‚ùå Status code no manejado: \(httpResponse.statusCode)")
                throw ChildServiceError.unknownError
            }
            
        } catch let error as ChildServiceError {
            print("‚ùå Re-throwing ChildServiceError: \(error)")
            throw error
        } catch {
            print("‚ùå ERROR DE RED/URLSession:")
            print("‚ùå Error: \(error)")
            print("‚ùå Type: \(type(of: error))")
            print("‚ùå LocalizedDescription: \(error.localizedDescription)")
            throw ChildServiceError.networkError
        }
    }
}

// MARK: - Child Service Errors
enum ChildServiceError: Error, LocalizedError {
    case notAuthenticated
    case invalidRequest
    case networkError
    case serverError
    case invalidResponse
    case unknownError
    
    var errorDescription: String? {
        switch self {
        case .notAuthenticated:
            return "No est√°s autenticado. Por favor, inicia sesi√≥n nuevamente."
        case .invalidRequest:
            return "Los datos proporcionados no son v√°lidos."
        case .networkError:
            return "Error de conexi√≥n. Verifica tu internet."
        case .serverError:
            return "Error del servidor. Intenta m√°s tarde."
        case .invalidResponse:
            return "Respuesta inv√°lida del servidor."
        case .unknownError:
            return "Error desconocido."
        }
    }
}
